on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version to release"
        required: true
        type: string

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.repository == 'cottoncammy/disquark'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11
          cache: maven
      - name: Maven release
        env:
          VERSION: ${{ inputs.version }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        run: |
            ./mvnw -B -s .github/mvn-ci-settings.xml -DnewVersion="${VERSION}" versions:set
            ./mvnw -B -s .github/mvn-ci-settings.xml -DskipTests -DskipFormatting verify
              
            git config user.name "cottoncammy"
            git config user.email "40479627+cottoncammy@users.noreply.github.com"
            git config gpg.program "gpg2"
          
            mkdir ~/.gnupg
            cat << EOF > ~/.gnupg/gpg.conf
            batch
            no-tty          
            pinentry-mode loopback
            EOF
                    
            echo "allow-preset-passphrase" > ~/.gnupg/gpg-agent.conf    
            echo RELOADAGENT | gpg-connect-agent
          
            echo "${{ secrets.GPG_SECRET_KEY }}" | base64 --decode | gpg2 --import
            "$(gpgconf --list-dirs libexecdir)"/gpg-preset-passphrase -P ${{ secrets.GPG_PASSPHRASE }} --preset ${{ secrets.GPG_SECRET_KEY_KEYGRIP }}
          
            git commit -am "[${{ github.workflow }}] - prepare release ${VERSION}" -S
            git tag -s -m "Release ${VERSION}" "${VERSION}"
            git push origin "${VERSION}"
            git switch -d "${VERSION}"

            ./mvnw -B -s .github/mvn-ci-settings.xml -Prelease -ntp -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }}